#ifStart($only_content == false)#
package #{$package};

import java.util.*;
import com.teamide.util.*;
import com.teamide.exception.*;
import com.teamide.bean.*;
import com.teamide.param.*;
import com.teamide.annotation.*;

import com.alibaba.fastjson.*;

import #{$app_factory.$package}.#{$app_factory.$classname};

import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import #{$i_package}.#{$i_classname};

import #{$IDao.$package}.#{$IDao.$classname};

/**
 * SQL Dao 新增
 * #{$comment}
 */
@SuppressWarnings("unused")
@Service
public class #{$classname} implements #{$i_classname} {

	@Autowired
	#{$app_factory.$classname} factory;
	
	@Autowired
	#{$i_classname}.#{$i_classname}Mapper mapper;
#ifEnd#

	#ifStart($is_batch == true)#

	/**
	 * 执行
	 * #{$method_name}
	 * #{$comment}
	 */
	@DataSource()
	@Comment("#{$comment}")
	public List<Map<String, Object>> #{$method_name}(JSON json, @VariableData JSONObject data) throws Exception {
		// 用于暂存字段取到的值
		Object value = null;

		#ifStart($datarule != null)#
		JSONObject cache = (JSONObject)data.clone();
		if (json != null && !(json instanceof JSONArray)) {
			cache.putAll((JSONObject) JSON.toJSON(json));
		}
		json = (JSON) JSON.toJSON(factory.getValueByJexlScript("#{$datarule}", cache));
		#ifEnd#
		
		JSONArray list = new JSONArray();
		if(json != null) {
			if (json instanceof JSONArray) {
				list = (JSONArray) JSON.toJSON(json);
			} else {
				list.add(JSON.toJSON(json));
			}
		}
		List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
		for(int i = 0; i < list.size(); i++){
			JSONObject one = (JSONObject)data.clone();
			one.putAll(list.getJSONObject(i));
			one.put("$index", i);
			Map<String, Object> res = #{$method_name}(one);
			result.add(res);
		}
		return result;
	}
	#ifEnd#
	
	/**
	 * 执行
	 */
	@DataSource()
	public Map<String, Object> #{$method_name}(@VariableData JSONObject data) throws Exception {
		// 用于暂存字段取到的值
		Object value = null;
		JSONObject variableCache = new JSONObject();
		if(data != null){
			variableCache = (JSONObject)data.clone();
		}
#ifStart($variable_content != null)#
#{$variable_content}
#ifEnd#
#ifStart($validate_content != null)#
#{$validate_content}
#ifEnd#
		Map<String, Object> result = mapper.#{$method_name}(variableCache);
		
		return variableCache;
	}
	
#ifStart($only_content == false)#
}
#ifEnd#
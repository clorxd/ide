package #{$package};

import java.io.File;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Pattern;

import org.apache.commons.jexl3.JexlBuilder;
import org.apache.commons.jexl3.JexlEngine;
import org.apache.commons.jexl3.JexlExpression;
import org.apache.commons.jexl3.MapContext;
import org.slf4j.Logger;

import com.alibaba.fastjson.JSONObject;

#forStart($scripts, $script)#
import #{$script.$package}.#{$script.$classname};
#forEnd#

import com.teamide.util.LogUtil;
import com.teamide.util.StringUtil;

import org.springframework.stereotype.Component;

@Component
public class #{$classname} {

	static Logger logger = LogUtil.get();

	// 创建 JexlBuilder
	final JexlBuilder builder = new JexlBuilder();
	// 创建 JexlEngine
	final JexlEngine jexl;

	// 创建 JexlEngine
	final JexlEngine strictJexl;

	final MapContext context = new MapContext();

	private Map<String, Object> jexlScriptMap = new HashMap<String, Object>();

	private Map<String, Object> defaultContext = new HashMap<String, Object>();

	public JexlProcessor() {
		#forStart($scripts, $script)#
		jexlScriptMap.put("#{$script.$propertyname}", new #{$script.$classname}());
		#forEnd#
		
		#ifStart($AES_KEY != null)#
		defaultContext.put("AES_KEY","#{$AES_KEY}");
		#ifEnd#
		strictJexl = builder.strict(true).create();
		jexl = builder.strict(false).create();
	}

	public Object invoke(String jexlScript, JSONObject data) {
		return invoke(jexlScript, data, false);
	}

	public Object invoke(String jexlScript, JSONObject data, boolean strict) {
		if (jexlScript == null) {
			return null;
		}
		jexlScript = jexlScript.trim();
		if (jexlScript.startsWith("#{") && jexlScript.endsWith("}")) {
			jexlScript = jexlScript.substring(2, jexlScript.length() - 1);
			jexlScript = jexlScript.trim();
		}
		if (StringUtil.isEmpty(jexlScript)) {
			return jexlScript;
		}
		// 如果不是代码库运算，则直接从data中取出数据
		if (!isCodeOperation(jexlScript)) {
			if (data != null && data.get(jexlScript) != null) {
				return data.get(jexlScript);
			}
			if (StringUtil.isNumber(jexlScript)) {
				return jexlScript;
			}
			return null;
		}

		JexlExpression expression;
		if (strict) {
			expression = strictJexl.createExpression(jexlScript);
		} else {
			expression = jexl.createExpression(jexlScript);
		}
		// 创建context，用于传递参数
		context.clear();

		if (data != null) {
			for (String key : data.keySet()) {
				context.set(key, data.get(key));
			}
		}
		for (String key : defaultContext.keySet()) {
			context.set(key, defaultContext.get(key));
		}
		for (String key : jexlScriptMap.keySet()) {
			context.set(key, jexlScriptMap.get(key));
		}
		Object value = expression.evaluate(context);
		return value;
	}

	public void setJexlScriptText(String key, String scriptText) {
		if (scriptText != null) {
			jexlScriptMap.put(key, jexl.createScript(scriptText));
		}
	}

	public void setJexlScriptFile(String key, File scriptFile) {
		if (scriptFile != null) {
			jexlScriptMap.put(key, jexl.createScript(scriptFile));
		}
	}

	public void setJexlScript(String key, Object jexlScript) {
		if (jexlScript != null) {
			jexlScriptMap.put(key, jexlScript);
		}
	}

	public void setContext(String key, Object value) {
		if (value != null) {
			defaultContext.put(key, value);
		}
	}

	private static boolean isCodeOperation(String jexlScript) {
		return CODE_OPERATION_PATTERN.matcher(jexlScript).find();
	}

	static Pattern CODE_OPERATION_PATTERN = Pattern.compile("[~'\"+-/*%^=!&|\\[\\].<>?{}()]");

}

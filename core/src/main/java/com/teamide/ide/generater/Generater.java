
package com.teamide.ide.generater;

import java.io.File;

import com.teamide.app.AppContext;
import com.teamide.ide.processor.param.RepositoryProcessorParam;
import com.teamide.ide.processor.repository.project.AppBean;
import com.teamide.util.ObjectUtil;
import com.teamide.util.StringUtil;

public abstract class Generater {

	protected final AppBean app;

	protected final AppContext context;

	protected final RepositoryProcessorParam param;

	public static final String HEAD_NOTE = "/* TeamIDE File Marker */";

	public static final String HEAD_REMARK = "/** The current file is generated by TeamIDE, please do not modify and move! **/";

	public Generater(RepositoryProcessorParam param, AppBean app, AppContext context) {
		this.param = param;
		this.app = app;
		this.context = context;
	}

	public abstract void generate() throws Exception;

	public String toHump(String name) {
		if (StringUtil.isEmpty(name)) {
			return name;
		}
		String[] chars = name.split("");
		String result = "";
		for (int i = 0; i < chars.length; i++) {
			if (StringUtil.isEmpty(chars[i])) {
				continue;
			}
			if (chars[i].equals("/") || chars[i].equals("\\")) {
				continue;
			}
			if (result.length() == 0) {
				result += chars[i];
			} else {
				if (chars[i - 1].equals("/") || chars[i - 1].equals("\\")) {
					result += chars[i].toUpperCase();
				} else {
					result += chars[i];
				}
			}
		}
		return result;
	}

	public String getFolderByName(String name) {
		if (name.indexOf("/") > 0) {
			return name.substring(0, name.lastIndexOf("/"));
		}
		return "";
	}

	public String getFolderPackage(String folder) {
		String pack = "";
		int level = -1;
		if (context.getJava() != null) {
			if (StringUtil.isNotEmpty(context.getJava().getDirectorypackagelevel())) {
				try {
					level = Integer.valueOf(context.getJava().getDirectorypackagelevel());
				} catch (Exception e) {

				}
			}
		}
		if (!StringUtil.isEmpty(folder)) {
			String[] folders = folder.split("/");
			if (level < 0 || level > folders.length) {
				level = folders.length;
			}
			for (int i = 0; i < level; i++) {
				String f = folders[i];
				if (StringUtil.isEmpty(f)) {
					continue;
				}
				if (StringUtil.isNotEmpty(pack)) {
					pack += ".";
				}
				pack += f;
			}
		}
		return pack;
	}

	public File getJavaFolder() {
		String javadirectory = null;
		if (context.getJava() != null) {
			javadirectory = context.getJava().getJavadirectory();
		}
		if (StringUtil.isEmpty(javadirectory)) {
			javadirectory = "src/main/java";
		}

		return param.getFile(javadirectory);
	}

	public File getResourcesFolder() {
		String resourcesdirectory = null;
		if (context.getJava() != null) {
			resourcesdirectory = context.getJava().getResourcesdirectory();
		}
		if (StringUtil.isEmpty(resourcesdirectory)) {
			resourcesdirectory = "src/main/resources";
		}

		return param.getFile(resourcesdirectory);
	}

	public boolean isUsemybatis() {
		Boolean usemybatis = null;
		if (context.getJava() != null) {
			usemybatis = context.getJava().getUsemybatis();
		}
		return ObjectUtil.isTrue(usemybatis);
	}

	public boolean isMergedirectory() {
		Boolean mergedirectory = null;
		if (context.getJava() != null) {
			mergedirectory = context.getJava().getMergedirectory();
		}
		return ObjectUtil.isTrue(mergedirectory);
	}

	public String getFactoryPackage() {
		String pack = null;
		if (context.getJava() != null) {
			pack = context.getJava().getFactorypackage();
		}
		if (StringUtil.isEmpty(pack)) {
			pack = getBasePackage() + ".factory";
		}
		return pack;
	}

	public String getComponentPackage() {
		String pack = null;
		if (context.getJava() != null) {
			pack = context.getJava().getComponentpackage();
		}
		if (StringUtil.isEmpty(pack)) {
			pack = getBasePackage() + ".component";
		}
		return pack;
	}

	public String getControllerPackage() {
		String pack = null;
		if (context.getJava() != null) {
			pack = context.getJava().getControllerpackage();
		}
		if (StringUtil.isEmpty(pack)) {
			pack = getBasePackage() + ".controller";
		}
		return pack;
	}

	public String getDaoPackage() {
		String pack = null;
		if (context.getJava() != null) {
			pack = context.getJava().getDaopackage();
		}
		if (StringUtil.isEmpty(pack)) {
			pack = getBasePackage() + ".dao";
		}
		return pack;
	}

	public String getServicePackage() {
		String pack = null;
		if (context.getJava() != null) {
			pack = context.getJava().getServicepackage();
		}
		if (StringUtil.isEmpty(pack)) {
			pack = getBasePackage() + ".service";
		}
		return pack;
	}

	public String getDictionaryPackage() {
		String pack = null;
		if (context.getJava() != null) {
			pack = context.getJava().getDictionarypackage();
		}
		if (StringUtil.isEmpty(pack)) {
			pack = getBasePackage() + ".dictionary";
		}
		return pack;
	}

	public String getBeanPackage() {
		String pack = null;
		if (context.getJava() != null) {
			pack = context.getJava().getBeanpackage();
		}
		if (StringUtil.isEmpty(pack)) {
			pack = getBasePackage() + ".bean";
		}
		return pack;
	}

	public String getAppFactoryClassname() {
		return "AppFactory";
	}

	public String getDaoComponentClassname() {
		return "DaoComponent";
	}

	public String getTransactionComponentClassname() {
		return "TransactionComponent";
	}

	public String getBasePackage() {
		String basepackage = null;
		if (context.getJava() != null) {
			basepackage = context.getJava().getBasepackage();
		}
		if (StringUtil.isEmpty(basepackage)) {
			basepackage = "com.teamide.app";
		}

		return basepackage;
	}

	public String packageToPath(String pack) {
		if (StringUtil.isEmpty(pack)) {
			return pack;
		}
		return pack.replaceAll("\\.", "/");
	}

}

package #{$package};

import java.lang.reflect.Method;
import java.sql.Connection;

import javax.annotation.Resource;
import javax.sql.DataSource;

import org.springframework.jdbc.datasource.ConnectionHolder;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.stereotype.Component;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.support.DefaultTransactionStatus;

@Component("teamide-transaction")
public class #{$classname} extends DataSourceTransactionManager {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@Resource
	DataSource dataSource;

	@Override
	public void afterPropertiesSet() {
		this.setDataSource(dataSource);
		super.afterPropertiesSet();
	}

	@Override
	protected void doBegin(Object transaction, TransactionDefinition definition) {
		super.doBegin(transaction, definition);
		try {
			Method method = transaction.getClass().getMethod("getConnectionHolder", new Class<?>[0]);
			ConnectionHolder holder = (ConnectionHolder) method.invoke(transaction, new Object[0]);

			Connection connection = holder.getConnection();
			DaoComponent.set(connection);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	protected void doCommit(DefaultTransactionStatus status) {
		super.doCommit(status);
		DaoComponent.remove();
	}

	@Override
	protected void doRollback(DefaultTransactionStatus status) {
		super.doRollback(status);
	}

	@Override
	protected void doCleanupAfterCompletion(Object transaction) {
		super.doCleanupAfterCompletion(transaction);
		DaoComponent.remove();
	}
}

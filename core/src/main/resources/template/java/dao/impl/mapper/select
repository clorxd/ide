#ifStart($only_content == false)#
package #{$package};

import java.util.*;
import com.teamide.util.*;
import com.teamide.exception.*;

import com.alibaba.fastjson.*;

import #{$app_factory.$package}.#{$app_factory.$classname};

import com.teamide.db.bean.*;
import com.teamide.bean.*;

import com.teamide.dao.IDao;
import com.teamide.param.DataParam;
import com.teamide.annotation.*;

import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import #{$i_package}.#{$i_classname};

/**
 * SQL Dao 查询
 * #{$comment}
 */
@SuppressWarnings("unused")
@Service
public class #{$classname} implements #{$i_classname} {

	@Autowired
	#{$app_factory.$classname} factory;
	
	@Autowired
	#{$i_classname}.#{$i_classname}Mapper mapper;
#ifEnd#

	/**
	 * 执行 
	 * #{$method_name}
	 * #{$comment}
	 */
	@DataSource()
	#ifStart($sqlType == 'SELECT_ONE')#
	public Map<String, Object> #{$method_name}(@VariableData JSONObject data) throws Exception {
	#ifEnd#
	#ifStart($sqlType == 'SELECT_LIST')#
	public List<Map<String, Object>> #{$method_name}(@VariableData JSONObject data) throws Exception {
	#ifEnd#
	#ifStart($sqlType == 'SELECT_PAGE')#
	public PageResultBean<Map<String, Object>> #{$method_name}(@VariableData JSONObject data) throws Exception {
	#ifEnd#		
		JSONObject variableCache = new JSONObject();
		if(data != null){
			variableCache = (JSONObject)data.clone();
		}
		// 用于暂存字段取到的值
		Object value = null;
#ifStart($variable_content != null)#
#{$variable_content}
#ifEnd#
#ifStart($validate_content != null)#
#{$validate_content}
#ifEnd#

		// 组合SQL Param
		#ifStart($sqlType == 'SELECT_ONE')#
		Map<String, Object> result = mapper.#{$method_name}(variableCache);
		#ifStart($formats.size() > 0 || $subselects.size() > 0)#
		#{$format_name}(result, variableCache);
		#ifEnd#
		return result;
		#ifEnd#
		#ifStart($sqlType == 'SELECT_LIST')#
		List<Map<String, Object>> result = mapper.#{$method_name}(variableCache);
		#ifStart($formats.size() > 0 || $subselects.size() > 0)#
		#{$format_name}(result, variableCache);
		#ifEnd#
		return result;
		#ifEnd#
		#ifStart($sqlType == 'SELECT_PAGE')#
		PageResultBean<Map<String, Object>> result = new PageResultBean<Map<String, Object>>();
		List<Map<String, Object>> list = #{$method_name}ForList(variableCache);
		int count = mapper.#{$method_name}ForCount(variableCache);
		#ifStart($formats.size() > 0 || $subselects.size() > 0)#
		#{$format_name}(result, variableCache);
		#ifEnd#
		return result;
		#ifEnd#
	}
	
	#ifStart($sqlType == 'SELECT_PAGE')#
	public List<Map<String, Object>> #{$method_name}ForList(@VariableData JSONObject variableCache) throws Exception {
		return mapper.#{$method_name}ForList(variableCache);
	}
	
	public int #{$method_name}ForCount(@VariableData JSONObject variableCache) throws Exception {
		return mapper.#{$method_name}ForCount(variableCache);
	}
	#ifEnd#
	
	#ifStart($formats.size() > 0 || $subselects.size() > 0)#
	#ifStart($sqlType == 'SELECT_PAGE')#
	/**
	 * 格式化分页结果
	 */
	public void #{$format_name}(PageResultBean<Map<String, Object>> result, JSONObject data) throws Exception {
		if(result == null) {
			return;
		}
		for(Map<String, Object> one : result.getValue()){
			#{$format_name}(one, data);
		}
	}
	#ifEnd#
	#ifStart($sqlType == 'SELECT_LIST')#
	/**
	 * 格式化列表结果
	 */
	public void #{$format_name}(List<Map<String, Object>> result, JSONObject data) throws Exception {
		if(result == null) {
			return;
		}
		for(Map<String, Object> one : result){
			#{$format_name}(one, data);
		}
	}
	#ifEnd#
	
	/**
	 * 格式化单条结果
	 */
	public void #{$format_name}(Map<String, Object> result, @VariableData JSONObject data) throws Exception {
		if(result == null) {
			return;
		}
		JSONObject json = new JSONObject();
		if(data != null){
			json.putAll(data);
		}
		json.putAll(result);
		#forStart($formats, $format, $index)#
		result.put("#{$format.$key}", #{$app_factory.$classname}.getValueByJexlScript("#{$format.formatvalue}", json));
		#forEnd#
		#forStart($subselects, $subselect, $index)#
		result.put("#{$subselect.$name}", #{$query_name}#{$subselect.$method}(json));
		#forEnd#
	}
	
	#forStart($subselects, $subselect, $index)#
	/**
	 * 子查询
	 */
	@DataSource()
	#ifStart($subselect.queryone == true)#
	public Map<String, Object> #{$query_name}#{$subselect.$method}(@VariableData JSONObject variableCache) throws Exception {
	#ifEnd#
	#ifStart($subselect.queryone == false)#
	public List<Map<String, Object>> #{$query_name}#{$subselect.$method}(@VariableData JSONObject variableCache) throws Exception {
	#ifEnd#
		// 用于暂存字段取到的值
		Object value = null;
#ifStart($variable_content != null)#
#{$variable_content}
#ifEnd#
#ifStart($validate_content != null)#
#{$validate_content}
#ifEnd#
		#ifStart($subselect.queryone == true)#
		Map<String, Object> result = mapper.#{$query_name}#{$subselect.$method}(variableCache);
		return result;
		#ifEnd#
		#ifStart($subselect.queryone == false)#
		List<Map<String, Object>> result = mapper.#{$query_name}#{$subselect.$method}(variableCache);
		return result;
		#ifEnd#
	}
	#forEnd#
	#ifEnd#
#ifStart($only_content == false)#
}
#ifEnd#
#ifStart($only_content == false)#
package #{$package};

import java.util.*;
import com.teamide.util.*;
import com.teamide.exception.*;

import com.alibaba.fastjson.*;

import #{$app_factory.$package}.#{$app_factory.$classname};

import com.teamide.db.bean.*;
import com.teamide.bean.*;

import com.teamide.dao.IDao;
import com.teamide.param.DataParam;
import com.teamide.annotation.*;

import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import #{$i_package}.#{$i_classname};

/**
 * SQL Dao 查询
 * #{$comment}
 */
@SuppressWarnings("unused")
@Service
public class #{$classname} implements #{$i_classname} {

	@Autowired
	#{$app_factory.$classname} factory;
	
	@Autowired
	IDao dao;
#ifEnd#

	/**
	 * 执行 
	 * #{$method_name}
	 * #{$comment}
	 */
	@DataSource()
	#ifStart($sqlType == 'SELECT_ONE')#
	public Map<String, Object> #{$method_name}(@VariableData JSONObject data) throws Exception {
	#ifEnd#
	#ifStart($sqlType == 'SELECT_LIST')#
	public List<Map<String, Object>> #{$method_name}(@VariableData JSONObject data) throws Exception {
	#ifEnd#
	#ifStart($sqlType == 'SELECT_PAGE')#
	public PageResultBean<Map<String, Object>> #{$method_name}(@VariableData JSONObject data) throws Exception {
	#ifEnd#
		
		// 组合SQL Param
		#ifStart($sqlType == 'SELECT_ONE')#
		SqlParam sqlParam = #{$build_name}(data);
		Map<String, Object> result = dao.queryOne(sqlParam);
		#ifEnd#
		#ifStart($sqlType == 'SELECT_LIST')#
		SqlParam sqlParam = #{$build_name}(data);
		List<Map<String, Object>> result = dao.queryList(sqlParam);
		#ifEnd#
		#ifStart($sqlType == 'SELECT_PAGE')#
		PageSqlParam pageSqlParam = #{$build_name}(data);
		PageResultBean<Map<String, Object>> result = dao.queryPage(pageSqlParam);
		#ifEnd#
		#ifStart($formats.size() > 0 || $subselects.size() > 0)#
		#{$format_name}(result, data);
		#ifEnd#
		return result;
	}
	
	/**
	 * 组合SQL
	 */
	#ifStart($sqlType == 'SELECT_PAGE')#
	public PageSqlParam #{$build_name}(JSONObject data) throws Exception {
	#ifEnd#
	#ifStart($sqlType != 'SELECT_PAGE')#
	public SqlParam #{$build_name}(JSONObject data) throws Exception {
	#ifEnd#
		// 用于暂存字段取到的值
		Object value = null;
		// SQL执行用到的参数，SQL中使用“:key”作占位符
		Map<String, Object> param = new HashMap<String, Object>();
		
		// SQL语句
		StringBuffer sql = new StringBuffer();
		// SQL From语句
		StringBuffer fromSql = new StringBuffer();
		// SQL Where语句
		StringBuffer whereSql = new StringBuffer();
		// SQL Group语句
		StringBuffer groupSql = new StringBuffer();
		// SQL 追加语句
		StringBuffer appendSql = new StringBuffer();
		
#{$content}

		// 拼接追加SQL语句
		sql.append(" ").append(appendSql);
		#ifStart($sqlType == 'SELECT_PAGE')#
		// 统计语句，用于分页
		StringBuffer countSql = new StringBuffer("SELECT COUNT(1) ");
		
		// 拼接查询From语句条件
		countSql.append(fromSql);
		// 拼接统计语句条件
		countSql.append(whereSql);
		// 拼接统计语句条件
		countSql.append(groupSql);
		
		// 解析SQL表达式，获得真实SQL
		String realSql = #{$app_factory.$classname}.resolveSqlJexl(sql.toString(), param, data);
		String realCountSql = #{$app_factory.$classname}.resolveSqlJexl(countSql.toString(), param, data);
		PageSqlParam pageSqlParam = new PageSqlParam(realSql, realCountSql, param);
		// 获取页码和每页数量
		int pagesize = data.getIntValue("_pagesize");
		int pageindex = data.getIntValue("_pageindex");
		pageSqlParam.setPagesize(pagesize);
		pageSqlParam.setPageindex(pageindex);
		
		return pageSqlParam;
		#ifEnd#
		#ifStart($sqlType != 'SELECT_PAGE')#
		// 解析SQL表达式，获得真实SQL
		String realSql = #{$app_factory.$classname}.resolveSqlJexl(sql.toString(), param, data);
		SqlParam sqlParam = new SqlParam(realSql, param);
		return sqlParam;
		#ifEnd#
	}
	
	#ifStart($formats.size() > 0 || $subselects.size() > 0)#
	#ifStart($sqlType == 'SELECT_PAGE')#
	/**
	 * 格式化分页结果
	 */
	public void #{$format_name}(PageResultBean<Map<String, Object>> result, JSONObject data) throws Exception {
		if(result == null) {
			return;
		}
		for(Map<String, Object> one : result.getValue()){
			#{$format_name}(one, data);
		}
	}
	#ifEnd#
	#ifStart($sqlType == 'SELECT_LIST')#
	/**
	 * 格式化列表结果
	 */
	public void #{$format_name}(List<Map<String, Object>> result, JSONObject data) throws Exception {
		if(result == null) {
			return;
		}
		for(Map<String, Object> one : result){
			#{$format_name}(one, data);
		}
	}
	#ifEnd#
	
	/**
	 * 格式化单条结果
	 */
	public void #{$format_name}(Map<String, Object> result, @VariableData JSONObject data) throws Exception {
		if(result == null) {
			return;
		}
		JSONObject json = new JSONObject();
		if(data != null){
			json.putAll(data);
		}
		json.putAll(result);
		#forStart($formats, $format, $index)#
		result.put("#{$format.$key}", #{$app_factory.$classname}.getValueByJexlScript("#{$format.formatvalue}", json));
		#forEnd#
		#forStart($subselects, $subselect, $index)#
		result.put("#{$subselect.$name}", #{$query_name}#{$subselect.$method}(json));
		#forEnd#
	}
	
	#forStart($subselects, $subselect, $index)#
	/**
	 * 子查询
	 */
	@DataSource()
	public Object #{$query_name}#{$subselect.$method}(@VariableData JSONObject data) throws Exception {
		
		// 用于暂存字段取到的值
		Object value = null;
		// SQL执行用到的参数，SQL中使用“:key”作占位符
		Map<String, Object> param = new HashMap<String, Object>();
		
		// SQL语句
		StringBuffer sql = new StringBuffer();
		// SQL From语句
		StringBuffer fromSql = new StringBuffer();
		// SQL Where语句
		StringBuffer whereSql = new StringBuffer();
		// SQL Group语句
		StringBuffer groupSql = new StringBuffer();
		// SQL 追加语句
		StringBuffer appendSql = new StringBuffer();
		
#{$subselect.$content}

		// 拼接追加SQL语句
		sql.append(" ").append(appendSql);
		
		// 解析SQL表达式，获得真实SQL
		String realSql = #{$app_factory.$classname}.resolveSqlJexl(sql.toString(), param, data);
		
		#ifStart($subselect.queryone == true)#
		return dao.queryOne(new SqlParam(realSql, param));
		#ifEnd#
		#ifStart($subselect.queryone == false)#
		return dao.queryList(new SqlParam(realSql, param));
		#ifEnd#
	}
	#forEnd#
	#ifEnd#
#ifStart($only_content == false)#
}
#ifEnd#
package #{$package};

import java.util.*;
import com.teamide.util.*;

import com.alibaba.fastjson.*;

import #{$app_factory.$package}.#{$app_factory.$classname};

#ifStart($sqlType == 'SELECT_PAGE')#
import com.teamide.db.bean.PageSqlParam;
import com.teamide.bean.PageResultBean;
#ifEnd#
#ifStart($sqlType != 'SELECT_PAGE')#
import com.teamide.db.bean.SqlParam;
#ifEnd#

import com.teamide.dao.IDao;
import com.teamide.param.DataParam;
import com.teamide.jexl.JexlTool;

/**
 * SQL Dao 查询
 * #{$comment}
 */
@SuppressWarnings("unused")
public class #{$classname} {
	
	/**
	 * 执行
	 */
	#ifStart($sqlType == 'SELECT_ONE')#
	public Map<String, Object> invoke(JSONObject data) throws Exception {
	#ifEnd#
	#ifStart($sqlType == 'SELECT_LIST')#
	public List<Map<String, Object>> invoke(JSONObject data) throws Exception {
	#ifEnd#
	#ifStart($sqlType == 'SELECT_PAGE')#
	public PageResultBean<Map<String, Object>> invoke(JSONObject data) throws Exception {
	#ifEnd#
		
		IDao dao = #{$app_factory.$classname}.getDao();
		
		// 组合SQL Param
		#ifStart($sqlType == 'SELECT_ONE')#
		SqlParam sqlParam = buildSqlParam(data);
		return dao.queryOne(sqlParam);
		#ifEnd#
		#ifStart($sqlType == 'SELECT_LIST')#
		SqlParam sqlParam = buildSqlParam(data);
		return dao.queryList(sqlParam);
		#ifEnd#
		#ifStart($sqlType == 'SELECT_PAGE')#
		PageSqlParam pageSqlParam = buildSqlParam(data);
		return dao.queryPage(pageSqlParam);
		#ifEnd#
	}
	
	/**
	 * 组合SQL
	 */
	#ifStart($sqlType == 'SELECT_PAGE')#
	public PageSqlParam buildSqlParam(JSONObject data) throws Exception {
	#ifEnd#
	#ifStart($sqlType != 'SELECT_PAGE')#
	public SqlParam buildSqlParam(JSONObject data) throws Exception {
	#ifEnd#
		// 用于暂存字段取到的值
		Object value = null;
		// SQL执行用到的参数，SQL中使用“:key”作占位符
		Map<String, Object> param = new HashMap<String, Object>();
		
		// SQL语句
		StringBuffer sql = new StringBuffer();
		// 组合查询字段语句
	#forStart($select, $one)#
		#ifStart($one.condition == null)#
			#ifStart($one.sql != null)#
		sql.append("#{$one.sql}");
			#ifEnd#
		#ifEnd#
		#ifStart($one.condition != null)#
		if(ObjectUtil.isTrue(JexlTool.invoke("#{$one.condition}", data))){
			#ifStart($one.sql != null)#
			sql.append("#{$one.sql}");
			#ifEnd#
		}
		#ifEnd#
	#forEnd#
	
		// SQL From 语句
		StringBuffer fromSql = new StringBuffer();
		// 组合From语句
	#forStart($from, $one)#
		#ifStart($one.condition == null)#
			#ifStart($one.sql != null)#
		fromSql.append("#{$one.sql}");
			#ifEnd#
		#ifEnd#
		#ifStart($one.condition != null)#
		if(ObjectUtil.isTrue(JexlTool.invoke("#{$one.condition}", data))){
			#ifStart($one.sql != null)#
			fromSql.append("#{$one.sql}");
			#ifEnd#
		}
		#ifEnd#
	#forEnd#
	
		// 拼接查询From语句条件
		sql.append(fromSql);
	
		// SQL 条件语句
		StringBuffer whereSql = new StringBuffer("WHERE 1=1 ");
		// 组合条件语句
	#forStart($where, $one)#
		#ifStart($one.condition == null)#
			#ifStart($one.param == null)#
				#ifStart($one.sql != null)#
		whereSql.append("#{$one.sql}");
				#ifEnd#
			#ifEnd#
			#ifStart($one.param != null)#
				#ifStart($one.param.value != null)#
		value = JexlTool.invoke("#{$one.param.value}", data);
				#ifEnd#
				#ifStart($one.param.value == null)#
		value = JexlTool.invoke("#{$one.param.name}", data);
				#ifEnd#
				#ifStart($one.param.defaultvalue != null)#
		if(value == null || StringUtil.isEmptyIfStr(value)){
			value = JexlTool.invoke("#{$one.param.defaultvalue}", data);
		}
				#ifEnd#
		if(value != null && !StringUtil.isEmptyIfStr(value)){
				#ifStart($one.sql != null)#
			whereSql.append("#{$one.sql}");
				#ifEnd#
			param.put("#{$one.param.key}", value);
		}
			#ifEnd#
		#ifEnd#
		#ifStart($one.condition != null)#
		if(ObjectUtil.isTrue(JexlTool.invoke("#{$one.condition}", data))){
			#ifStart($one.param == null)#
				#ifStart($one.sql != null)#
			whereSql.append("#{$one.sql}");
				#ifEnd#
			#ifEnd#
			#ifStart($one.param != null)#
				#ifStart($one.param.value != null)#
			value = JexlTool.invoke("#{$one.param.value}", data);
				#ifEnd#
				#ifStart($one.param.value == null)#
			value = JexlTool.invoke("#{$one.param.name}", data);
				#ifEnd#
				#ifStart($one.param.defaultvalue != null)#
			if(value == null || StringUtil.isEmptyIfStr(value)){
				value = JexlTool.invoke("#{$one.param.defaultvalue}", data);
			}
				#ifEnd#
			if(value != null && !StringUtil.isEmptyIfStr(value)){
				#ifStart($one.sql != null)#
				whereSql.append("#{$one.sql}");
				#ifEnd#
				param.put("#{$one.param.key}", value);
			}
			#ifEnd#
		}
		#ifEnd#
	#forEnd#
	
		// 拼接查询语句条件
		sql.append(whereSql);
		#ifStart($whereAfter != null && $whereAfter.size() > 0)#
		
		// 最后拼接排序等语句
		#ifEnd#
	#forStart($whereAfter, $one)#
		#ifStart($one.condition == null)#
			#ifStart($one.sql != null)#
		sql.append("#{$one.sql}");
			#ifEnd#
		#ifEnd#
		#ifStart($one.condition != null)#
		if(ObjectUtil.isTrue(JexlTool.invoke("#{$one.condition}", data))){
			#ifStart($one.sql != null)#
			sql.append("#{$one.sql}");
			#ifEnd#
		}
		#ifEnd#
	#forEnd#
	
		#ifStart($sqlType == 'SELECT_PAGE')#
		// 统计语句，用于分页
		StringBuffer countSql = new StringBuffer("SELECT COUNT(1) ");
		
		// 拼接查询From语句条件
		countSql.append(fromSql);
		
		// 拼接统计语句条件
		countSql.append(whereSql);
		
		PageSqlParam pageSqlParam = new PageSqlParam(sql.toString(), countSql.toString(), param);
		// 获取页码和每页数量
		int pagesize = data.getIntValue("_pagesize");
		int pageindex = data.getIntValue("_pageindex");
		pageSqlParam.setPagesize(pagesize);
		pageSqlParam.setPageindex(pageindex);
		
		return pageSqlParam;
		#ifEnd#
		#ifStart($sqlType != 'SELECT_PAGE')#
		SqlParam sqlParam = new SqlParam(sql.toString(), param);
		return sqlParam;
		#ifEnd#
	}
}
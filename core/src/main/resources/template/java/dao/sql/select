package #{$package};

import java.util.*;
import com.teamide.util.*;
import com.teamide.exception.*;

import com.alibaba.fastjson.*;

import #{$app_factory.$package}.#{$app_factory.$classname};

import com.teamide.db.bean.*;
#ifStart($sqlType == 'SELECT_PAGE')#
import com.teamide.bean.PageResultBean;
#ifEnd#
#ifStart($sqlType != 'SELECT_PAGE')#
#ifEnd#

import com.teamide.dao.IDao;
import com.teamide.param.DataParam;

#ifStart($usespringannotation == true)#
import org.springframework.stereotype.Service;
#ifEnd#

/**
 * SQL Dao 查询
 * #{$comment}
 */
@SuppressWarnings("unused")
#ifStart($usespringannotation == true)#
@Service
#ifEnd#
public class #{$classname} {
	
	/**
	 * 执行
	 */
	#ifStart($sqlType == 'SELECT_ONE')#
	public Map<String, Object> invoke(JSONObject data) throws Exception {
	#ifEnd#
	#ifStart($sqlType == 'SELECT_LIST')#
	public List<Map<String, Object>> invoke(JSONObject data) throws Exception {
	#ifEnd#
	#ifStart($sqlType == 'SELECT_PAGE')#
	public PageResultBean<Map<String, Object>> invoke(JSONObject data) throws Exception {
	#ifEnd#
		
		#ifStart($database == null)#
		IDao dao = #{$app_factory.$classname}.getDao(data);
		#ifEnd#
		#ifStart($database != null)#
		IDao dao = #{$app_factory.$classname}.getDaoFor#{$database.name}(data);
		#ifEnd#
		
		// 组合SQL Param
		#ifStart($sqlType == 'SELECT_ONE')#
		SqlParam sqlParam = buildSqlParam(data);
		return dao.queryOne(sqlParam);
		#ifEnd#
		#ifStart($sqlType == 'SELECT_LIST')#
		SqlParam sqlParam = buildSqlParam(data);
		return dao.queryList(sqlParam);
		#ifEnd#
		#ifStart($sqlType == 'SELECT_PAGE')#
		PageSqlParam pageSqlParam = buildSqlParam(data);
		return dao.queryPage(pageSqlParam);
		#ifEnd#
	}
	
	/**
	 * 组合SQL
	 */
	#ifStart($sqlType == 'SELECT_PAGE')#
	public PageSqlParam buildSqlParam(JSONObject data) throws Exception {
	#ifEnd#
	#ifStart($sqlType != 'SELECT_PAGE')#
	public SqlParam buildSqlParam(JSONObject data) throws Exception {
	#ifEnd#
		// 用于暂存字段取到的值
		Object value = null;
		// SQL执行用到的参数，SQL中使用“:key”作占位符
		Map<String, Object> param = new HashMap<String, Object>();
		
		// SQL语句
		StringBuffer sql = new StringBuffer();
		// SQL From语句
		StringBuffer fromSql = new StringBuffer();
		// SQL Where语句
		StringBuffer whereSql = new StringBuffer();
		// SQL Group语句
		StringBuffer groupSql = new StringBuffer();
		// SQL 追加语句
		StringBuffer appendSql = new StringBuffer();
		
#{$content}

		// 拼接追加SQL语句
		sql.append(" ").append(appendSql);
		#ifStart($sqlType == 'SELECT_PAGE')#
		// 统计语句，用于分页
		StringBuffer countSql = new StringBuffer("SELECT COUNT(1) ");
		
		// 拼接查询From语句条件
		countSql.append(fromSql);
		// 拼接统计语句条件
		countSql.append(whereSql);
		// 拼接统计语句条件
		countSql.append(groupSql);
		
		// 解析SQL表达式，获得真实SQL
		String realSql = #{$app_factory.$classname}.resolveSqlJexl(sql.toString(), param, data);
		String realCountSql = #{$app_factory.$classname}.resolveSqlJexl(countSql.toString(), param, data);
		PageSqlParam pageSqlParam = new PageSqlParam(realSql, realCountSql, param);
		// 获取页码和每页数量
		int pagesize = data.getIntValue("_pagesize");
		int pageindex = data.getIntValue("_pageindex");
		pageSqlParam.setPagesize(pagesize);
		pageSqlParam.setPageindex(pageindex);
		
		return pageSqlParam;
		#ifEnd#
		#ifStart($sqlType != 'SELECT_PAGE')#
		// 解析SQL表达式，获得真实SQL
		String realSql = #{$app_factory.$classname}.resolveSqlJexl(sql.toString(), param, data);
		SqlParam sqlParam = new SqlParam(realSql, param);
		return sqlParam;
		#ifEnd#
	}
}
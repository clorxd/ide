package #{$package};

import com.teamide.*;
import com.teamide.factory.*;
import com.teamide.bean.*;
import com.teamide.dao.IDao;
import com.teamide.exception.*;
import com.teamide.factory.DatabaseFactory;
import com.teamide.jexl.JexlProcessor;
import com.teamide.jexl.SqlJexlResolver;
import com.teamide.service.IService;
import com.teamide.util.LogUtil;

import java.util.Map;
import javax.annotation.Resource;
import javax.sql.DataSource;

import org.apache.commons.jexl3.JexlException;
import org.slf4j.Logger;

import com.alibaba.fastjson.*;
import org.springframework.stereotype.Component;

import #{$dao_component.$package}.#{$dao_component.$classname};

/**
 * AppFactory
 * 应用工厂
 */
@SuppressWarnings("unused")
@Component("teamide-factory")
public class #{$classname} extends BaseFactory{
	
	static Logger logger = LogUtil.get();
	
	static #{$classname} TEAMIDE_FACTORY = new #{$classname}();

	public #{$classname}() {
		TEAMIDE_FACTORY = this;
	}
	
	@Resource
	private DynamicDataSourceFactory dynamicDataSourceFactory;

	public static IDao getDao(JSONObject json) throws Exception {
		DataSource dataSource = TEAMIDE_FACTORY.dynamicDataSourceFactory.getDataSource(null, json);
		return new #{$dao_component.$classname}(dataSource);
	}

	public static IDao getDao(String name, JSONObject json) throws Exception {
		DataSource dataSource = TEAMIDE_FACTORY.dynamicDataSourceFactory.getDataSource(name, json);
		return new #{$dao_component.$classname}(dataSource);
	}

	/**
	 * jexl表达式处理器，解析字符表达式，得到结果
	 */
	public static JexlProcessor JEXL_PROCESSOR = new JexlProcessor();

	/**
	 * 传入表达式和data，获取表达式值
	 * 
	 * @param jexlScript
	 *            表达式
	 * @param data
	 *            数据
	 * @return 表达式解析结果
	 */
	public static Object getValueByJexlScript(String jexlScript, JSONObject data) {

		try {
			return JEXL_PROCESSOR.invoke(jexlScript, data);
		} catch (JexlException.Variable e) {
			logger.warn(e.getMessage());
		}
		return null;
	}

	/**
	 * 解析sql表达式，sql可以使用#{key} ，:#{key}动态去data中取值
	 * 
	 * @param sql
	 *            含有表达式的sql
	 * @param param
	 *            sql的参数，解析出来的表达式值，填充到这个map中
	 * @param data
	 *            数据对象，从这个对象中取值
	 * @return 返回解析后的sql，将#{key}转为 value，将:#{key}转换为:key占位符
	 */
	public static String resolveSqlJexl(String sql, Map<String, Object> param, JSONObject data) {
		// 只解析含有表达式的SQL
		if (sql != null && sql.indexOf("#{") >= 0) {
			SqlJexlResolver sqlJexlResolver = new SqlJexlResolver(sql, data, JEXL_PROCESSOR);
			sql = sqlJexlResolver.resolve();
			for (String key : sqlJexlResolver.getParam().keySet()) {
				param.put(key, sqlJexlResolver.getParam().get(key));
			}
		}
		return sql;
	}
	
	
	/**
	 * 将结果转成status
	 * 
	 * @param result
	 *            结果
	 * @return status 转后的返回
	 */
	public static Object toStatus(Object result, Exception e) {
		if (e != null) {
			Status error = Status.FAIL();
			error.setErrmsg(e.getMessage());
			if (e instanceof BaseException) {
				BaseException base = (BaseException) e;
				error.setErrcode(base.getErrcode());
				error.setErrmsg(base.getErrmsg());
			} else if (e instanceof NullPointerException) {
				error.setErrmsg("null pointer exception.");
				e.printStackTrace();
			}
			return error;
		}
		Status status = Status.SUCCESS();
		if (result != null) {
			if (!(result instanceof ResultBean)) {
				status.setValue(result);
			} else {
				return result;
			}
		}
		return status;
	}

}